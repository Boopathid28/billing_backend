# Generated by Django 4.2.4 on 2024-08-20 14:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('old_gold_management', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('books', '0001_initial'),
        ('settings', '0001_initial'),
        ('masters', '0001_initial'),
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BagID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bag_id', models.CharField(max_length=50, unique=True, verbose_name=' Bag Id')),
            ],
            options={
                'verbose_name': 'bag_id',
                'verbose_name_plural': 'bag_id',
                'db_table': 'bag_id',
            },
        ),
        migrations.CreateModel(
            name='MeltingIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('melting_issue_id', models.CharField(max_length=50, verbose_name='Melting Issue ID')),
                ('issued_date', models.DateField(verbose_name='Issued Date')),
                ('return_days', models.IntegerField(verbose_name='Due Days')),
                ('return_date', models.DateField(verbose_name='Issued Date')),
                ('bullion_rate', models.FloatField(default=0.0, max_length=50, verbose_name='Bullion Rate')),
                ('stone_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Stone Weight')),
                ('gross_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Stone Weight')),
                ('net_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Stone Weight')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('issued_at', models.DateTimeField(blank=True, null=True, verbose_name='issued At')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.branch', verbose_name='Branch')),
                ('issued_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='issued By')),
            ],
            options={
                'verbose_name': 'melting_issue',
                'verbose_name_plural': 'melting_issues',
                'db_table': 'melting_issue',
            },
        ),
        migrations.CreateModel(
            name='MeltingIssueID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('melting_issue_id', models.CharField(max_length=50, unique=True, verbose_name=' melting issue Id')),
            ],
            options={
                'verbose_name': 'melting_issue_id',
                'verbose_name_plural': 'melting_issue_id',
                'db_table': 'melting_issue_id',
            },
        ),
        migrations.CreateModel(
            name='MeltingRecipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('melting_recipt_id', models.CharField(max_length=50, verbose_name='Melting Recipt ID')),
                ('received_date', models.DateField(verbose_name='received Date')),
                ('melting_loss_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Melting Loss Weight')),
                ('recipt_net_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Recipt Net Weight')),
                ('melting_charges', models.FloatField(default=0.0, max_length=50, verbose_name='Melting Charges')),
                ('amount_paid', models.FloatField(default=0.0, max_length=50, verbose_name='Amount Paid')),
                ('remark', models.TextField(blank=True, null=True, verbose_name='Remark')),
                ('received_at', models.DateTimeField(blank=True, null=True, verbose_name='received At')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.branch', verbose_name='Branch')),
                ('melting_issue_details', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='refinery_management.meltingissue', verbose_name='Melting Issue Details')),
                ('melting_status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='melting_status', to='settings.statustable', verbose_name='Melting Status')),
                ('payment_status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='melting_payment_status', to='settings.statustable', verbose_name='Payment Status')),
                ('received_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='received By')),
            ],
            options={
                'verbose_name': 'melting_recipt',
                'verbose_name_plural': 'melting_recipts',
                'db_table': 'melting_recipt',
            },
        ),
        migrations.CreateModel(
            name='MeltingReciptID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('melting_recipt_id', models.CharField(max_length=50, unique=True, verbose_name=' melting recipt Id')),
            ],
            options={
                'verbose_name': 'melting_recipt_id',
                'verbose_name_plural': 'melting_recipt_id',
                'db_table': 'melting_recipt_id',
            },
        ),
        migrations.CreateModel(
            name='OldGoldType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=50, unique=True, verbose_name='Old Gold Type')),
            ],
            options={
                'verbose_name': 'old_gold_type',
                'verbose_name_plural': 'old_gold_types',
                'db_table': 'old_gold_type',
            },
        ),
        migrations.CreateModel(
            name='OldMetalCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=50, unique=True, verbose_name='Category Name')),
            ],
            options={
                'verbose_name': 'old_metal_category',
                'verbose_name_plural': 'old_metal_categorys',
                'db_table': 'old_metal_category',
            },
        ),
        migrations.CreateModel(
            name='PurificationIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purification_issue_id', models.CharField(max_length=100, unique=True, verbose_name='Purification Issue Id')),
                ('issued_date', models.DateField(verbose_name='Issued Date')),
                ('return_days', models.IntegerField(verbose_name='Due Days')),
                ('return_date', models.DateField(verbose_name='Return Date')),
                ('bag_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Bag Weight')),
                ('recipt_metal_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Recipt Metal Weight')),
                ('issued_pure_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Issued Pure Weight')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('issued_at', models.DateTimeField(blank=True, null=True, verbose_name='issued At')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.branch', verbose_name='Branch')),
                ('issued_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='issued By')),
                ('issued_category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='refinery_management.oldmetalcategory', verbose_name='Issued Category')),
                ('melting_recipt_details', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='refinery_management.meltingrecipt', verbose_name='Melting Recipt Details')),
                ('purification_status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='settings.statustable', verbose_name='Purification Status')),
                ('smith', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='books.accountheaddetails', verbose_name='Smith Details')),
            ],
            options={
                'verbose_name': 'purification_issue',
                'verbose_name_plural': 'purification_issues',
                'db_table': 'purification_issue',
            },
        ),
        migrations.CreateModel(
            name='PurificationIssueID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purification_issue_id', models.CharField(max_length=50, unique=True, verbose_name=' Purification Issue Id')),
            ],
            options={
                'verbose_name': 'purification_issue_id',
                'verbose_name_plural': 'purification_issue_ids',
                'db_table': 'purification_issue_id',
            },
        ),
        migrations.CreateModel(
            name='PurificationReciptID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purification_recipt_id', models.CharField(max_length=50, unique=True, verbose_name=' Purification recipt Id')),
            ],
            options={
                'verbose_name': 'purification_recipt_id',
                'verbose_name_plural': 'purification_recipt_ids',
                'db_table': 'purification_recipt_id',
            },
        ),
        migrations.CreateModel(
            name='TransferCreation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('refference_number', models.CharField(max_length=50, unique=True, verbose_name='Refference Number')),
                ('total_gross_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Total Gross Weight')),
                ('total_net_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Total Net Weight')),
                ('total_dust_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Total Dust Weight')),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='Created At')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('metal', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='masters.metal', verbose_name='Metal')),
                ('smith', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='books.accountheaddetails', verbose_name='Smith')),
                ('transfer_category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='refinery_management.oldmetalcategory', verbose_name='Trasfer_category')),
            ],
            options={
                'verbose_name': 'transfer_creation',
                'verbose_name_plural': 'transfer_creations',
                'db_table': 'transfer_creation',
            },
        ),
        migrations.CreateModel(
            name='TransferCreationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=50, unique=True, verbose_name='Type Name')),
            ],
            options={
                'verbose_name': 'transfer_creation_type',
                'verbose_name_plural': 'transfer_creation_types',
                'db_table': 'transfer_creation_type',
            },
        ),
        migrations.CreateModel(
            name='TransferCreationItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_gold_number', models.CharField(max_length=50, verbose_name='Old Gold Number')),
                ('refference_number', models.CharField(max_length=50, verbose_name='Refference Number')),
                ('received_date', models.DateField(verbose_name='Received Date')),
                ('transfered_date', models.DateField(verbose_name='Transfered Date')),
                ('gross_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='gross weight')),
                ('net_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='net weight')),
                ('dust_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='dust weight')),
                ('old_item_details', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='old_gold_management.oldgolditemdetails', verbose_name='Old Gold Item')),
                ('old_metal', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='masters.metal', verbose_name='Old Metal')),
                ('transfet_creation_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='refinery_management.transfercreation', verbose_name='Transfer Creation Details')),
            ],
            options={
                'verbose_name': 'transfer_creation_item',
                'verbose_name_plural': 'transfer_creation_items',
                'db_table': 'transfer_creation_item',
            },
        ),
        migrations.AddField(
            model_name='transfercreation',
            name='transfer_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='refinery_management.transfercreationtype', verbose_name='Transfer Type'),
        ),
        migrations.CreateModel(
            name='PurificationReciptNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purification_recipt_number', models.CharField(max_length=50, unique=True, verbose_name='Purification recipt Number')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'purification_recipt_number',
                'verbose_name_plural': 'purification_recipt_numbers',
                'db_table': 'purification_recipt_number',
            },
        ),
        migrations.CreateModel(
            name='PurificationRecipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('putification_recipt_id', models.CharField(max_length=50, unique=True, verbose_name='Purification Recipt Id')),
                ('received_date', models.DateField(verbose_name='Recived Date')),
                ('issued_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Issued Weight')),
                ('issued_pure_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Issued Pure Weight')),
                ('received_pure_weight', models.FloatField(default=0.0, max_length=50, verbose_name='Received Pure Weight')),
                ('touch', models.FloatField(default=0.0, max_length=50, verbose_name='Touch')),
                ('melting_bullion_rate', models.FloatField(default=0.0, max_length=50, verbose_name='Melting Bullion Rate')),
                ('purification_charges', models.FloatField(default=0.0, max_length=50, verbose_name='Purification Charges')),
                ('amount_paid', models.FloatField(default=0.0, max_length=50, verbose_name='Paid Amount')),
                ('received_at', models.DateTimeField(blank=True, null=True, verbose_name='received At')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.branch', verbose_name='Branch')),
                ('payment_status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payment_status', to='settings.statustable', verbose_name='Payment Status')),
                ('purification_issue_details', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='refinery_management.purificationissue', verbose_name='Purification Issue Details')),
                ('purification_status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purification_status', to='settings.statustable', verbose_name='Purification Status')),
                ('received_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='received By')),
                ('received_category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='refinery_management.oldmetalcategory', verbose_name='Received Category')),
            ],
            options={
                'verbose_name': 'purification_recipt',
                'verbose_name_plural': 'purification_recipts',
                'db_table': 'purification_recipt',
            },
        ),
        migrations.CreateModel(
            name='PurificationIssueNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purification_issue_number', models.CharField(max_length=50, unique=True, verbose_name='Purification Issue Number')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'purification_issue_number',
                'verbose_name_plural': 'purification_issue_numbers',
                'db_table': 'purification_issue_number',
            },
        ),
        migrations.CreateModel(
            name='MeltingReciptNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('melting_recipt_number', models.CharField(max_length=50, unique=True, verbose_name=' melting recipt Number')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'melting_recipt_number',
                'verbose_name_plural': 'melting_recipt_numbers',
                'db_table': 'melting_recipt_number',
            },
        ),
        migrations.AddField(
            model_name='meltingrecipt',
            name='received_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='refinery_management.oldmetalcategory', verbose_name='Received Category'),
        ),
        migrations.CreateModel(
            name='MeltingIssueNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('melting_issue_number', models.CharField(max_length=50, unique=True, verbose_name=' melting issue Number')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'melting_issue_number',
                'verbose_name_plural': 'melting_issue_numbers',
                'db_table': 'melting_issue_number',
            },
        ),
        migrations.AddField(
            model_name='meltingissue',
            name='issued_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='refinery_management.oldmetalcategory', verbose_name='Issued Category'),
        ),
        migrations.AddField(
            model_name='meltingissue',
            name='melting_status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='settings.statustable', verbose_name='Melting Status'),
        ),
        migrations.AddField(
            model_name='meltingissue',
            name='transfer_creation_details',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='refinery_management.transfercreation', verbose_name='Transfer creation Details'),
        ),
        migrations.CreateModel(
            name='BagNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bag_number', models.CharField(max_length=50, unique=True, verbose_name=' bag Number')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'bag_number',
                'verbose_name_plural': 'bag_numbers',
                'db_table': 'bag_number',
            },
        ),
    ]
