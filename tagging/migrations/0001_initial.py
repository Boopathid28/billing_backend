# Generated by Django 4.2.4 on 2024-08-20 14:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('books', '0001_initial'),
        ('settings', '0001_initial'),
        ('masters', '0001_initial'),
        ('accounts', '0001_initial'),
        ('infrastructure', '0001_initial'),
        ('product', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EntryType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_name', models.CharField(max_length=50, unique=True, verbose_name='Entry Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Status')),
                ('created_at', models.DateTimeField(null=True, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(null=True, verbose_name='Modified at')),
                ('modified_by', models.CharField(max_length=50, null=True, verbose_name='Modified By')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'entry_type',
                'verbose_name_plural': 'entry_types',
                'db_table': 'entry_type',
            },
        ),
        migrations.CreateModel(
            name='Lot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_number', models.CharField(max_length=10, unique=True, verbose_name='Lot Number')),
                ('entry_date', models.DateField(verbose_name='Lot Entry Date')),
                ('invoice_number', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Refference Invoice Number')),
                ('total_pieces', models.IntegerField(blank=True, null=True, verbose_name='Total Pieces')),
                ('total_tag_count', models.IntegerField(blank=True, null=True, verbose_name='Total Tag Count')),
                ('total_grossweight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Total Gross Weight')),
                ('total_netweight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Total Net Weight')),
                ('total_stone_pieces', models.IntegerField(blank=True, null=True, verbose_name='Total Stone Pieces')),
                ('total_stone_weight', models.FloatField(blank=True, max_length=100, null=True, verbose_name='Total Stone Weight')),
                ('total_stone_rate', models.FloatField(blank=True, max_length=100, null=True, verbose_name='Total Stone Rate')),
                ('total_diamond_pieces', models.IntegerField(blank=True, null=True, verbose_name='Total Diamond')),
                ('total_diamond_weight', models.FloatField(blank=True, max_length=100, null=True, verbose_name='Total Diamond Weight')),
                ('total_diamond_rate', models.FloatField(blank=True, max_length=100, null=True, verbose_name='Total Diamond Rate')),
                ('tagged_grossweight', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Tagged Gross Weight')),
                ('tagged_netweight', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Tagged Net Weight')),
                ('tagged_pieces', models.IntegerField(blank=True, default=0, null=True, verbose_name='Tagged Pieces')),
                ('tagged_stone_pieces', models.IntegerField(blank=True, default=0, null=True, verbose_name='Tagged Stone Pieces')),
                ('tagged_stone_weight', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Tagged Stone Weight')),
                ('tagged_diamond_pieces', models.IntegerField(blank=True, default=0, null=True, verbose_name='Tagged Diamond Pieces')),
                ('tagged_diamond_weight', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Tagged Diamond Weight')),
                ('tagged_tag_count', models.IntegerField(blank=True, default=0.0, null=True, verbose_name='Tagged Tag Count')),
                ('hallmark_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Hallmark Number')),
                ('hallmark_center', models.CharField(blank=True, max_length=100, null=True, verbose_name='Hallmark Center')),
                ('created_at', models.DateTimeField(null=True, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(null=True, verbose_name='Modified at')),
                ('modified_by', models.CharField(max_length=50, null=True, verbose_name='Modified By')),
                ('branch', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tagged_branch', to='accounts.branch')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('designer_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='books.accountheaddetails', verbose_name='Designer Name')),
                ('entry_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='tagging.entrytype', verbose_name='Entry Type')),
                ('tag_status', models.ForeignKey(default='1', on_delete=django.db.models.deletion.PROTECT, to='settings.statustable', verbose_name='Tag Status')),
            ],
            options={
                'verbose_name': 'lot',
                'verbose_name_plural': 'lots',
                'db_table': 'lot',
            },
        ),
        migrations.CreateModel(
            name='LotID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_number', models.CharField(max_length=10, unique=True, verbose_name='Lot Number')),
            ],
            options={
                'verbose_name': 'lot_id',
                'verbose_name_plural': 'lot_ids',
                'db_table': 'lot_id',
            },
        ),
        migrations.CreateModel(
            name='LotItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bulk_tag', models.BooleanField(default=False, verbose_name='Bulk Tag')),
                ('pieces', models.IntegerField(verbose_name='Pieces')),
                ('tag_count', models.IntegerField(verbose_name='Tag Count')),
                ('gross_weight', models.FloatField(max_length=50, verbose_name='Gross Weight')),
                ('net_weight', models.FloatField(max_length=50, verbose_name='Net Weight')),
                ('tag_weight', models.FloatField(max_length=50, verbose_name='Tag Weight')),
                ('cover_weight', models.FloatField(max_length=50, verbose_name='Cover Weight')),
                ('loop_weight', models.FloatField(max_length=50, verbose_name='Loop Weight')),
                ('other_weight', models.FloatField(max_length=50, verbose_name='Other Weight')),
                ('tagged_grossweight', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Tagged Gross Weight')),
                ('tagged_netweight', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Tagged Net Weight')),
                ('tagged_pieces', models.IntegerField(blank=True, default=0.0, null=True, verbose_name='Tagged Pieces')),
                ('tagged_tag_count', models.IntegerField(blank=True, default=0.0, null=True, verbose_name='Tagged Tag Count')),
                ('item_stone_pieces', models.IntegerField(blank=True, null=True, verbose_name='Item Stone Pieces')),
                ('item_stone_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Item Stone Weight')),
                ('item_diamond_pieces', models.IntegerField(blank=True, null=True, verbose_name='Item Diamond Pieces')),
                ('item_diamond_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Item Diamond Weight')),
                ('remark', models.CharField(blank=True, max_length=100, null=True, verbose_name='Remarks')),
                ('item_details', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='product.item', verbose_name='Item Details')),
                ('lot_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tagging.lot', verbose_name='LOT Details')),
                ('subitem_details', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='product.subitem', verbose_name='Sub Item Details')),
                ('tag_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='masters.tagtypes', verbose_name='Tag Type')),
            ],
            options={
                'verbose_name': 'lot_item',
                'verbose_name_plural': 'lot_items',
                'db_table': 'lot_item',
            },
        ),
        migrations.CreateModel(
            name='LotItemDiamond',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diamond_pieces', models.IntegerField(blank=True, null=True, verbose_name='Diamond Pieces')),
                ('diamond_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Diamond Weight')),
                ('diamond_rate', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Diamond Rate')),
                ('total_diamond_value', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Total Diamond Value')),
                ('tagged_diamond_weight', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Tagged Diamond Weight')),
                ('tagged_diamond_pieces', models.IntegerField(blank=True, default=0.0, null=True, verbose_name='Tagged Diamond Pieces')),
                ('include_diamond_weight', models.BooleanField(default=True, verbose_name='Include Diamond Weight')),
                ('diamond_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='masters.stonedetails', verbose_name='Diamond Name')),
            ],
            options={
                'verbose_name': 'lot_item_diamond',
                'verbose_name_plural': 'lot_item_diamonds',
                'db_table': 'lot_item_diamond',
            },
        ),
        migrations.CreateModel(
            name='LotItemStone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stone_pieces', models.IntegerField(blank=True, null=True, verbose_name='Stone Pieces')),
                ('stone_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Stone Weight')),
                ('stone_rate', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Stone Rate')),
                ('total_stone_value', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Total Stone Value')),
                ('tagged_stone_weight', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Tagged Stone Weight')),
                ('tagged_stone_pieces', models.IntegerField(blank=True, default=0.0, null=True, verbose_name='Tagged Stone Pieces')),
                ('include_stone_weight', models.BooleanField(default=True, verbose_name='Include Stone Weight')),
                ('lot_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tagging.lot', verbose_name='LOT Details')),
                ('lot_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tagging.lotitem', verbose_name='Lot Item Details')),
                ('stone_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='masters.stonedetails', verbose_name='Stone Name')),
            ],
            options={
                'verbose_name': 'lot_item_stone',
                'verbose_name_plural': 'lot_item_stones',
                'db_table': 'lot_item_stone',
            },
        ),
        migrations.CreateModel(
            name='RateType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=50, unique=True, verbose_name='Entry Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Status')),
                ('created_at', models.DateTimeField(null=True, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(null=True, verbose_name='Modified at')),
                ('modified_by', models.CharField(max_length=50, null=True, verbose_name='Modified By')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'rate_type',
                'verbose_name_plural': 'rate_type',
                'db_table': 'rate_type',
            },
        ),
        migrations.CreateModel(
            name='StoneWeightType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight_name', models.CharField(max_length=50, unique=True, verbose_name='Weight Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Status')),
                ('created_at', models.DateTimeField(null=True, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(null=True, verbose_name='Modified at')),
                ('modified_by', models.CharField(max_length=50, null=True, verbose_name='Modified By')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'stone_weight_type',
                'verbose_name_plural': 'stone_weight_types',
                'db_table': 'stone_weight_type',
            },
        ),
        migrations.CreateModel(
            name='TagEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(null=True, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(null=True, verbose_name='Modified at')),
                ('modified_by', models.CharField(max_length=50, null=True, verbose_name='Modified By')),
                ('branch', models.ForeignKey(blank=True, db_column='branch', default=1, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tagged_entry_branch', to='accounts.branch')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('lot_details', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tagging.lot', verbose_name='LOT Details')),
            ],
            options={
                'verbose_name': 'tag_entry',
                'verbose_name_plural': 'tag_entrys',
                'db_table': 'tag_entry',
            },
        ),
        migrations.CreateModel(
            name='TaggedItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_number', models.CharField(max_length=50, unique=True, verbose_name='Tag Pieces')),
                ('size_value', models.CharField(blank=True, max_length=150, null=True, verbose_name='Size')),
                ('tag_pieces', models.IntegerField(verbose_name='Tag Pieces')),
                ('tag_count', models.IntegerField(verbose_name='Tag Pieces')),
                ('gross_weight', models.FloatField(max_length=50, verbose_name='Gross Weight')),
                ('net_weight', models.FloatField(max_length=50, null=True, verbose_name='Net Weight')),
                ('tag_weight', models.FloatField(max_length=50, verbose_name='Tag Weight')),
                ('cover_weight', models.FloatField(max_length=50, verbose_name='Cover Weight')),
                ('loop_weight', models.FloatField(max_length=50, verbose_name='Loop Weight')),
                ('other_weight', models.FloatField(max_length=50, verbose_name='Other Weight')),
                ('stone_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Stone Weight')),
                ('stone_rate', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Stone Weight')),
                ('stone_pieces', models.IntegerField(blank=True, null=True, verbose_name='Stone Pieces')),
                ('diamond_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Diamond Weight')),
                ('diamond_rate', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Diamond Rate')),
                ('diamond_pieces', models.IntegerField(blank=True, null=True, verbose_name='Diamond Pieces')),
                ('min_fixed_rate', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Min Wastage Percent')),
                ('max_fixed_rate', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Min Wastage Percent')),
                ('min_wastage_percent', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Max Wastage Percent')),
                ('min_flat_wastage', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Min Flat Wastage')),
                ('max_wastage_percent', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Max Wastage Percent')),
                ('max_flat_wastage', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Max Flat Wastage')),
                ('min_making_charge_gram', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Min Making Charge Per Gram')),
                ('min_flat_making_charge', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Min Flat Making Charge')),
                ('max_making_charge_gram', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Max Making Charge Per Gram')),
                ('max_flat_making_charge', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Max Flat Making Charge')),
                ('min_pergram_rate', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Min Per Gram Rate')),
                ('max_pergram_rate', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Max Per Gram Rate')),
                ('min_per_piece_rate', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Min Per Piece Rate')),
                ('max_per_piece_rate', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Max Per Piece Rate')),
                ('per_piece_rate', models.FloatField(blank=True, default=0.0, null=True, verbose_name='Per Piece Rate')),
                ('rough_sale_value', models.FloatField(blank=True, default=0.0, max_length=50, null=True, verbose_name='Rough Sale Value')),
                ('halmark_huid', models.CharField(max_length=50, verbose_name='Halmark HUID')),
                ('halmark_center', models.CharField(blank=True, max_length=50, null=True, verbose_name='Halmark Center')),
                ('remaining_pieces', models.IntegerField(blank=True, null=True, verbose_name='Remaining pieces')),
                ('remaining_gross_weight', models.FloatField(blank=True, null=True, verbose_name='Remaining Gross Weight')),
                ('remaining_net_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Remaining Net Weight')),
                ('remaining_tag_count', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Remaining Tag Count')),
                ('is_billed', models.BooleanField(default=False, verbose_name='Bill Status')),
                ('transfer', models.BooleanField(default=0, verbose_name='Transfer Status')),
                ('is_active', models.BooleanField(default=True, verbose_name='Status')),
                ('created_at', models.DateTimeField(null=True, verbose_name='Created at')),
                ('modified_at', models.DateTimeField(null=True, verbose_name='Modified at')),
                ('modified_by', models.CharField(max_length=50, null=True, verbose_name='Modified By')),
                ('branch', models.ForeignKey(blank=True, db_column='branch', default=1, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tagged_items_branch', to='accounts.branch')),
                ('calculation_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='product.calculationtype', verbose_name='Calculation Type')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('display_counter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='infrastructure.counter', verbose_name='Display Counter')),
                ('item_details', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.lotitem', verbose_name='Item Details')),
                ('per_gram_weight_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='product.weighttype', verbose_name='Weight Type')),
                ('sub_item_details', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='product.subitem', verbose_name='SubItem Details')),
                ('tag_entry_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tagging.tagentry', verbose_name='Tag Entry Details')),
                ('tag_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='masters.tagtypes', verbose_name='Tag Type')),
            ],
            options={
                'verbose_name': 'tagged_item',
                'verbose_name_plural': 'tagged_items',
                'db_table': 'tagged_item',
            },
        ),
        migrations.CreateModel(
            name='TagNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_number', models.CharField(max_length=50, verbose_name='Tag Number')),
            ],
            options={
                'verbose_name': 'tag_number',
                'verbose_name_plural': 'tag_number',
                'db_table': 'tag_number',
            },
        ),
        migrations.CreateModel(
            name='TaggedItemStone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stone_pieces', models.IntegerField(blank=True, null=True, verbose_name='Stone Pieces')),
                ('stone_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Stone Weight')),
                ('stone_rate', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Stone Rate')),
                ('total_stone_value', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Total Stone Value')),
                ('include_stone_weight', models.BooleanField(default=True, verbose_name='Include Stone Weight')),
                ('stone_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.lotitemstone', verbose_name='Stone Name')),
                ('stone_rate_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.ratetype', verbose_name='Rate Type')),
                ('stone_weight_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.stoneweighttype', verbose_name='Weight Type')),
                ('tag_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tagging.taggeditems', verbose_name='Tag Details')),
                ('tag_entry_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tagging.tagentry', verbose_name='Tag Entry Details')),
            ],
            options={
                'verbose_name': 'tagged_item_stone',
                'verbose_name_plural': 'tagged_item_stones',
                'db_table': 'tagged_item_stone',
            },
        ),
        migrations.CreateModel(
            name='TaggedItemDiamond',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diamond_pieces', models.IntegerField(blank=True, null=True, verbose_name='Diamond Pieces')),
                ('diamond_weight', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Diamond Weight')),
                ('diamond_rate', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Diamond Rate')),
                ('total_diamond_value', models.FloatField(blank=True, max_length=50, null=True, verbose_name='Total Diamond Value')),
                ('include_diamond_weight', models.BooleanField(default=False, verbose_name='Include Diamond Weight')),
                ('diamond_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.lotitemdiamond', verbose_name='Diamond Name')),
                ('diamond_rate_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.ratetype', verbose_name='Rate Type')),
                ('diamond_weight_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.stoneweighttype', verbose_name='Weight Type')),
                ('tag_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tagging.taggeditems', verbose_name='Tag Details')),
                ('tag_entry_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tagging.tagentry', verbose_name='Tag Entry Details')),
            ],
            options={
                'verbose_name': 'tagged_item_diamond',
                'verbose_name_plural': 'tagged_item_diamonds',
                'db_table': 'tagged_item_diamond',
            },
        ),
        migrations.AddField(
            model_name='lotitemstone',
            name='stone_rate_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.ratetype', verbose_name='Rate Type'),
        ),
        migrations.AddField(
            model_name='lotitemstone',
            name='stone_weight_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.stoneweighttype', verbose_name='Weight Type'),
        ),
        migrations.AddField(
            model_name='lotitemdiamond',
            name='diamond_rate_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.ratetype', verbose_name='Rate Type'),
        ),
        migrations.AddField(
            model_name='lotitemdiamond',
            name='diamond_weight_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.stoneweighttype', verbose_name='Weight Type'),
        ),
        migrations.AddField(
            model_name='lotitemdiamond',
            name='lot_details',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tagging.lot', verbose_name='LOT Details'),
        ),
        migrations.AddField(
            model_name='lotitemdiamond',
            name='lot_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tagging.lotitem', verbose_name='Lot Item Details'),
        ),
        migrations.CreateModel(
            name='DuplicateTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_copies', models.IntegerField(verbose_name='Number of Copies')),
                ('created_at', models.DateTimeField(verbose_name='Created at')),
                ('created_by', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('tag_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tagging.taggeditems', verbose_name='Tag Details')),
            ],
            options={
                'verbose_name': 'duplicate_tag',
                'verbose_name_plural': 'duplicate_tags',
                'db_table': 'duplicate_tag',
            },
        ),
    ]
